version: 2.1

commands:
  destroy_environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive

  revert-migrations:
    description: Revert the last migration if successful
    parameters:
      workflow_id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/Btyig2X8ehJdkoEV9tANwz/migration_<< parameters.workflow_id >>)
            if (( $SUCCESS == 1 ));
            then 
             cd ~/project/backend
             npm install
             npm run migration:revert
            fi

  install_awscli:
    description: install awscli v2
    steps:
      - run: 
          name: install awscli v2
          command: |
            sudo apt update && sudo apt upgrade
            sudo apt install curl 
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_nodejs:
    description: install nodejs
    steps: 
      - run: 
          name: install nodejs
          command: |
            sudo apt update && sudo apt upgrade
            sudo apt install curl 
            curl -fsSl https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:12.0.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:12.0.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:12.0.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end Test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:12.0.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run back-end Test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:12.0.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end Test
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:12.0.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run back-end Test
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
               --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
               --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
               --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "$BACKEND_AWS_PUBLIC_IP" >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy_environment

  configure-infrastructure:
    docker:
      - image: cimg/base:2022.04
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ee:a7:60:a0:bc:0e:d2:f6:15:5f:1f:1c:55:fb:5b:0a"]
      - attach_workspace:
          at: ~/
      - install_awscli
      - run:
          name: install ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y 
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            echo inventory.txt
            echo $TYPEORM_CONNECTION
            echo $TYPEORM_HOST
            echo $TYPEORM_PORT
            echo $TYPEORM_DATABASE
            echo $TYPEORM_USERNAME
            echo $TYPEORM_PASSWORD
            ansible-playbook -i inventory.txt configure-server.yml --extra-vars "_TYPEORM_CONNECTION=$TYPEORM_CONNECTION _TYPEORM_ENTITIES=$TYPEORM_ENTITIES _TYPEORM_HOST=$TYPEORM_HOST _TYPEORM_PORT=$TYPEORM_PORT _TYPEORM_USERNAME=$TYPEORM_USERNAME _TYPEORM_PASSWORD=$TYPEORM_PASSWORD _TYPEORM_DATABASE=$TYPEORM_DATABASE _TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS _TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR"
      - destroy_environment    

  run-migrations:
    docker:
      - image: circleci/node:12.0.0
    steps:
      - checkout
      - install_awscli
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migration_output.txt
            cat migration_output.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/Btyig2X8ehJdkoEV9tANwz/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy_environment
      - revert-migrations

  deploy-frontend:
    docker:
      - image: circleci/node:12.0.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - install_awscli
      - install_nodejs
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy_environment
      - revert-migrations 


  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ee:a7:60:a0:bc:0e:d2:f6:15:5f:1f:1c:55:fb:5b:0a"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update npm
      - run:
          name: Install ansible
          command: |
            apk add --update ansible
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy_environment
      - revert-migrations  

  smoke-test:
    docker:
      - image: cimg/base:2022.04 
    steps:
      - checkout
      - run: 
          name: install ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y 
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
      - install_awscli
      - run: 
          name: install nodejs
          command: |
            sudo apt update && sudo apt upgrade
            sudo apt install curl 
            curl -fsSl https://deb.nodesource.com/setup_12.x | sudo -E bash -
            sudo apt install -y nodejs

      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then 
               exit 0
            else 
               exit 1
            fi

      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi

      - destroy_environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - destroy_environment
      - revert-migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"              
            fi


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [test-feature-branch] 
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]